<h1>About</h1>
<p>四設計四甲</p>
<p>40823152 | 黃暐翰</p>
<p></p>
<p>個人倉儲:<a href="https://github.com/mdewcm2023/site-40823152">github</a></p>
<p><a href="https://github.com/"><img src="/images/github.png"/></a></p>
<p></p><h1>w1-w3</h1>
<p></p>
<h2>Useing a portable system</h2>
<p><strong>Step 1</strong></p>
<p>Go to the website <a href="https://mde.tw/wcm2023/content/index.html">mde.tw</a>,<span>Find the <span><span> </span></span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=U07OBT">Python3108_for_2023.7z</a> , unzip it and put it in a USB flash drive.</span></p>
<hr/>
<p><img alt="" height="544" src="/images/1.png" width="800"/></p>
<p></p>
<p>Step 2</p>
<p></p>
<p>Open <span style="color: #ff9900;">Python3128_for_2023</span> file and double-click start_ipv4.bat,y<span>ou can use the editing environment now.</span></p>
<hr/>
<p><span><img alt="" height="324" src="/images/1.1.png" width="800"/></span></p>
<p><span></span></p>
<p><span>Example compilation of Python program. </span></p>
<p><span>Find <span style="color: #ff9900;">hello.py</span> located in E:\wcm\Python3108_for_2023\data\tmp\py_ex, and run the program using the Scite editing environment by clicking on "Tools" -&gt; "Go".</span></p>
<p><span> </span></p>
<hr/>
<p><span><img alt="" height="537" src="/images/1.5.png" width="800"/></span></p>
<p><span></span></p>
<p><span>But the version of Python is outdated. Therefore, let's start setting up our own environment!</span></p>
<p><span><img alt="" height="478" src="/images/2.png" width="800"/></span></p>
<p><span></span></p>
<p><span></span></p>
<p><strong>Python various versions</strong></p>
<p><span><img alt="" height="714" src="/images/3.png" width="800"/></span></p><h2>Create a new portable system</h2>
<p><strong>Step 1: </strong></p>
<p><span>Find the <span style="color: #ff9900;">gen_portable_python.py</span> file located at E:\wcm\Python3108_for_2023\data\tmp\py_ex, and open the file using the Scite editing environment.</span></p>
<p><span><img alt="" height="528" src="/images/1.png" width="800"/></span></p>
<hr/>
<p><strong>Step 2</strong></p>
<p><span>Confrim vision  "3.11.2", and Translation: Confirm the location where Python is stored ,Ex:"E:\wcm\wcm2023_test2\data\Python311" .          "\": the root directory.</span></p>
<p><img alt="" height="769" src="/images/2.png" width="800"/></p>
<hr/>
<p><strong>Step 3</strong></p>
<p><span>Run the program using the Scite editing environment by clicking on "Tools" -&gt; "Go", You can see that the Python311 file has been added to the USB drive.</span></p>
<p><span><img alt="" height="794" src="/images/3.png" width="800"/></span></p>
<hr/>
<p><strong>Step 4</strong></p>
<p><span>Put the <span style="color: #ff9900;">Start.bat <span style="color: #000000;">and</span></span> <span style="color: #ff9900;">Stop.bat</span> into this wcm2023_test2 folder, Creat the home_ipv4, home_ipv6, tmp folder.</span></p>
<p><span><img alt="" height="283" src="/images/4.png" width="800"/></span></p>
<hr/>
<p><strong>Step 5</strong></p>
<p><span> Download the <a href="https://www.scintilla.org/wscite535.zip">Full 64-bit download</a><span><span> </span>(2.3M) </span>zip file from the <a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a> official website, Unzip the file and put it into E:\wcm\wcm2023_test2\data folder. Finial rename the name "wscite" to "wscite535".</span></p>
<p><span></span></p>
<p><span><img alt="" height="503" src="/images/5.png" width="800"/></span></p>
<p><span><img alt="" height="334" src="/images/5.1.png" width="800"/></span></p>
<hr/>
<p><strong>Step 6</strong></p>
<div class="group w-full text-gray-800 dark:text-gray-100 border-b border-black/10 dark:border-gray-900/50 bg-gray-50 dark:bg-[#444654]">
<div class="text-base gap-4 md:gap-6 md:max-w-2xl lg:max-w-xl xl:max-w-3xl p-4 md:py-6 flex lg:px-0 m-auto">
<div class="relative flex w-[calc(100%-50px)] flex-col gap-1 md:gap-3 lg:w-[calc(100%-115px)]">
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>In the Python3108_for_2023 environment, open start_ipv4.bat using Scite, r<span>ename the file with the name of the latest version, For example, the area marked with a red line.</span></p>
</div>
</div>
</div>
</div>
</div>
</div>
<p></p>
<p><img alt="" height="523" src="/images/6.png" width="800"/></p>
<hr/>
<p><strong>Step 7</strong></p>
<p><span>1.Edit python.properties and change line 153 to: python.command=pythonw </span></p>
<p><span>2.Edit SciTEGlobal.properties and change line 162 to: load.on.activate=1 (if the file being edited is modified in other applications, it can be automatically loaded in SciTE)</span></p>
<p><span>3.Edit SciTEGlobal.properties and change line 204 to: tabsize=4 </span></p>
<p><span>4.Edit SciTEGlobal.properties and change line 205 to: indent.size=4 Remove the # symbol on line 335 (code.page=65001, indicating that the editing area uses UTF-8 encoding) Comment out line 336 with the # symbol (code.page=0, indicating that the system's Chinese encoding, i.e. big-5, should be used)</span></p>
<p><span><img alt="" height="1163" src="/images/7.png" width="800"/></span></p>
<p><span><img alt="" height="692" src="/images/7.1.png" width="800"/></span></p>
<p><span><img alt="" height="621" src="/images/7.2.png" width="800"/></span></p>
<p><span><img alt="" height="526" src="/images/7.3.png" width="800"/></span></p>
<hr/>
<p><strong>Step 8</strong></p>
<p><span>C</span><span>ompleted the environment, write a simple code to test, for example, 'print("hi")'.</span></p>
<p><span></span></p>
<p><span><img alt="" height="317" src="/images/8.png" width="800"/></span></p>
<p><span></span></p>
<p></p><h1>W9</h1>
<p><strong>get score</strong></p>
<div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt">1aw5.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt">1aw6.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt">1aw6-2.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt">1aw8.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt">1aw9.txt</a></div>
</div>
<hr/>
<p></p>
<p>step1</p>
<p>利用Byrhon 讀取url中的資料</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">url = "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt"
#讀取url取掉跳行
data = open(url).read().split("\n")       
data = data[1:]
for i in data:
    #print(i)
    # ':' 隔開取第一位
    stud = i.split(":")[0]
    # ':' 隔開取第二位
    score =  i.split(":")[1]
    print(stud, score)</pre>
<p><br/><br/></p>
<hr/>
<h2>Bython reads exam scores</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p></p>
<p><strong>get score</strong></p>
<div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt">1aw5.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt">1aw6.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt">1aw6-2.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt">1aw8.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt">1aw9.txt</a></div>
<div></div>
<div><hr/></div>
<div></div>
</div>
<p><button id="add1to100part2">1aW5</button><button id="cango_three_gears">1aW6</button><button id="bsnake">1aW6-2</button><button id="aitetris">1aW8 </button><button id="threejsblock">1aW9 </button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/40823152/d2e9c4d2e571ee185de141ac45fe9c3b/raw/1938e2930b9193065f80bb3b7edf9ee615893275/get_score_1aw6"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/40823152/cb5754fc06c706c1bb59e7a8ca980583/raw/5f32e7172c77e6a28fe446db90d56d21f22dfcef/get_score_1aw6-2"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/40823152/dc3e395c11bf85bb566f6405684ca9b6/raw/8a9c5096474f7d223ce0325e3c88baaa2b3d69ed/get_score_1aw8"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/40823152/097671b1fc594300bb179227ddcccef5/raw/6093d3fe28045a83433a66db6398f734cdece562/get_score_1aw9"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2" style="width: 315px; height: 116px;"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>
<h1>W10~W12</h1>
<p></p><h2>w10</h2>
<p></p>
<p></p>
<p><img alt="" height="550" src="/images/nginx.png" width="800"/></p>
<p></p>
<p></p>
<p></p><h3>www web</h3>
<p><a href="http://192.168.1.24/content/index.html">http://192.168.1.24/content/index.html</a> </p>
<p></p>
<p><img caption="false" height="475" src="/images/www.sever.png" width="800"/></p>
<hr/>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">  server {
        listen       80;
        # ip 位置(要同區段網域，如192.168.1.xx)
        server_name  192.168.1.24;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            #  site路徑設定
            root   site/ ;
            index  index.html index.htm;
        }</pre><h2>W11</h2>
<p></p><p>OBS_Studio</p>
<p></p>
<p><span>This is open OBS and start recording using a obs.bat file.</span></p>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/prV44nxKKA4" width="560"></iframe></p>
<p></p>
<p>This is about obs.bat</p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">@echo off

cd Y:\obs\bin\64bit

start  obs64.exe


</pre>
<hr/>
<p></p>
<p>This is  use obs to output the video .<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GRl1ugiLHAc" width="560"></iframe></p><h2>W12</h2>
<p></p><p>stud2.cycu.org</p>
<p></p>
<p><a href="https://stud2.cycu.org/~wcm40823152/">stud2.cycu.org</a></p>
<p><img alt="" height="359" src="/images/idex40823152.png" width="800"/></p>
<p><img alt="" height="454" src="/images/stud2.org.png" width="800"/></p>
<p></p>
<p></p><h1>W13~W15</h1>
<p></p><h2>W13</h2>
<p></p>
<p>stud2.cycu.org:8005 environment.</p>
<p><a>https://stud2.cycu.org:8005</a></p>
<p></p>
<p><img alt="" height="501" src="/images/stud28005.png" width="800"/></p>
<p></p>
<p></p>
<p></p>
<hr/>
<p></p>
<p><span lang="zh-tw">Linux  vi instruction</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">J上, K下
H左, L右 
Esc or Ctrl+c 離開  
o 跳到下行'~'
:wq編輯好</pre>
<p><span lang="zh-tw"></span></p>
<p><span lang="zh-tw">Linux </span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">pwd    列出目前位置
ls -1    列出檔案
ls -1a  列出所有檔案
cat ' '   顯示' '檔案內的內容
</pre>
<p><span lang="zh-tw"></span></p>
<p><span lang="zh-tw"></span></p>
<p><span lang="zh-tw"></span></p><h2>W14</h2>
<p><span>Web Content Management System</span>:</p>
<ol>
<li><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a></li>
<li>近端動態與靜態網站 (依賴可攜環境啟動) - 特性為可以在不上網的環境中維護協同專案內容 (<a href="https://solvespace.com/index.pl">Solvespace</a>,<span> </span><a href="https://www.plm.automation.siemens.com/plmapp/education/solid-edge/en_us/free-software/community">Solid Edge Community Edition,</a><span> </span><a href="https://resources.sw.siemens.com/zh-TW/download-simcenter-femap-student-edition">CAE Femap Student Edition</a>), 資料保全度較差.</li>
<li>中端動態與靜態網站 (透過可攜程式系統與操作系統的設定, 建立自主伺服器,<span> </span><a href="https://www.fullstackpython.com/wsgi-servers.html">wsgi</a>,<span> </span><a href="https://www.nginx.com/">www</a>) - 特性為可自行管理, 沒有單一檔案的上傳容量限制, 分散式版次管理可以自行建立<span> </span><a href="https://www.inmotionhosting.com/support/website/git/git-server/">Git Server</a><span> </span>或使用<span> </span><a href="https://www2.fossil-scm.org/home/doc/trunk/www/index.wiki">Fossil SCM</a>), 資料保全度介於近端與雲端間.</li>
<li>雲端靜態網站 (透過<span> </span><a href="https://pages.github.com/">Github Pages</a><span> </span>建立倉儲的靜態網站) - 特定為資料保全度最佳.</li>
<li>雲端動態 -<span> </span><a href="https://replit.com/">Replit</a><span> </span>可與 Github 倉儲同步.</li>
</ol>
<hr/>
<p></p>
<p><strong>Solvespace</strong></p>
<p><a href="https://solvespace.com/download.pl"><img src="/images/SoleSpace.png"/></a></p>
<p></p>
<p></p>
<p></p><h3>Solvespace</h3>
<p></p>
<p><a href="https://solvespace.com/download.pl"><img src="/images/SoleSpace.png"/></a></p>
<p>Solvespace introduce:</p>
<p><span>Creating a new plane :  A point / a point and two line segments / Workplane  -&gt; </span>Nwe Group -&gt; Skech  In New Workplane</p>
<p></p>
<p>Cutout : New group extruding active sketch -&gt; solid model as -&gt; difference</p>
<p><img alt="" height="490" src="/images/SoleSpace_0.png" width="800"/></p>
<p></p>
<p>3D cylinder  </p>
<p><iframe height="900" src="/static/viewstl.html?src=/downloads/cylinder.stl" width="800 "></iframe></p>
<p></p><h2>w15</h2>
<p></p>
<p><img alt="" height="454" src="/images/about_replit.png" width="797"/></p>
<p></p><h3>Replit</h3>
<p></p>
<p>Replit : <a href="https://40823152.github.io/w15/content/index.html">url</a></p>
<p><a href="https://replit.com/~"><img src="/images/replit.png"/></a></p>
<p><img alt="" height="449" src="/images/replit_github-page_web.png" width="800"/></p>
<p><span></span></p>
<p><span>github  : </span><a href="https://github.com/40823152/w15">url</a></p>
<p><a href="https://github.com/"><img src="/images/github.png"/></a></p>
<p></p><p>Github_new_repository</p>
<p>Github -&gt; New(Top Respositorie) -&gt; Repository name -&gt; create <span> repository</span></p>
<div class="Box-sc-g0xbh4-0 bYQyDU"></div>
<p></p>
<p>github repository</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/40823152/w15.git
git push -u origin main</pre>
<p></p>
<p></p>
<hr/>
<p>To create a new repository on GitHub, follow these steps:</p>
<ol>
<li>
<p>Sign in to your GitHub account. If you don't have an account, you can create one for free at <a href="https://github.com/join" target="_new">https://github.com/join</a>.</p>
</li>
<li>
<p>Once signed in, click on the "+" button in the top-right corner of the GitHub interface. A dropdown menu will appear.</p>
</li>
<li>
<p>From the dropdown menu, select "New repository." You will be taken to the "Create a new repository" page.</p>
</li>
<li>
<p>On the "Create a new repository" page, provide the following information:</p>
<ul>
<li>Repository name: Choose a unique and descriptive name for your repository.</li>
<li>Description (optional): Add a brief description to help others understand the purpose of your repository.</li>
<li>Visibility: Choose whether you want your repository to be public (visible to everyone), private (visible only to you and collaborators you specify), or internal (visible to members of your organization).</li>
<li>Initialize this repository with a README: If you want to include a README file, which is helpful for providing project information, instructions, or documentation, check this option.</li>
<li>Add .gitignore: If your project requires ignoring certain files or directories (e.g., logs, dependencies, or build artifacts), select the appropriate .gitignore template.</li>
<li>Choose a license (optional): If you want to specify a license for your repository, choose one from the provided options.</li>
</ul>
</li>
<li>
<p>Once you have filled in the necessary information, click on the "Create repository" button at the bottom of the page.</p>
</li>
</ol>
<p>Congratulations! You have successfully created a new repository on GitHub. You can now start adding files, making commits, and collaborating with others on your project.</p>
<p></p><h3>replit_new_repository</h3>
<p></p>
<p>Create a Repl -&gt; <span>Template 'Python' -&gt; Title 'name'  -&gt; Create a Repl</span></p>
<p><span></span></p>
<p><span>The following image shows the screenshot after successfully creating a repository on Replit.</span></p>
<p><img alt="" height="373" src="/images/replit_test.png" width="800"/></p>
<p></p>
<hr/>
<p>To create a new repository on Replit, you can follow these steps:</p>
<ol>
<li>
<p>Sign in to your Replit account. If you don't have an account, you can create one for free at <a href="https://replit.com/signup" target="_new">https://replit.com/signup</a>.</p>
</li>
<li>
<p>Once signed in, you will be taken to your Replit dashboard. Click on the "+" button in the top-right corner of the interface. A dropdown menu will appear.</p>
</li>
<li>
<p>From the dropdown menu, select "New Repl." You will be taken to the "Create a new repl" page.</p>
</li>
<li>
<p>On the "Create a new repl" page, provide the following information:</p>
<ul>
<li>Choose a language: Select the programming language you want to use for your repository. Replit supports a wide range of programming languages and frameworks.</li>
<li>Choose a template (optional): If you want to start with a pre-configured template or framework, you can select one from the provided options. This step is optional, and you can also start with a blank repl.</li>
<li>Give your repl a name: Choose a unique and descriptive name for your repository.</li>
</ul>
</li>
<li>
<p>Once you have filled in the necessary information, click on the "Create Repl" button at the bottom of the page.</p>
</li>
</ol>
<p>Congratulations! You have successfully created a new repository (repl) on Replit. You can now start coding, adding files, and collaborating with others on your project.</p>
<p></p><h1>W16</h1>
<p>w16 則可以反向利用已經建立 cmsimde 網站的倉儲 (使用<span> </span><a href="https://github.com/mdecycu/cmsite">cmsite</a><span> </span>或<span> </span><a href="https://github.com/mdecycu/cmsimde_site">cmsimde_site</a><span> </span>(or<span> </span><a href="https://github.com/scrum-3/cmsimde_site">cmsimde_site</a>) 作為 template), 以 import 的方式導入 Replit 後執行動態網站, 也可以達到利用 Replit 維護 Github Pages 網站的目的. 但必須特別注意, 首次從 github import 倉儲至 Replit, 必須點選連結 Replit 與 Github 授權後才可順利完成兩個網站的導入與內容維護. 之後的網站維護必須利用 Replit Tools 中的 Git 工具完成 git add 與 commit, 然後才能在 Shell 執行 git push, 與 w15 的差異為無需自行設定 .git/config 中的授權 token, 而是透過 Replilt 與 Github 帳號間的授權進行兩端資料的同步.</p>
<p>利用 Replit 與 Github 進行動態網站與靜態網站的整合:</p>
<p>w16: <a href="https://w16.scrum3.repl.co/">https://w16.scrum3.repl.co</a><a><span> </span>(</a><a href="https://github.com/scrum-3/w16">https://github.com/scrum-3/w16</a>, <a href="https://scrum-3.github.io/w16">https://scrum-3.github.io/w16</a>)</p>
<p>w15:<span> </span><a href="https://w15.scrum3.repl.co/">https://w15.scrum3.repl.co</a><span> </span>(<a href="https://github.com/scrum-3/w15">https://github.com/scrum-3/w15</a>,<span> </span><a href="https://scrum-3.github.io/w15">https://scrum-3.github.io/w15</a>)</p>
<p></p>
<h2>w16_replit</h2>
<p></p>
<p>replit :　<a href="https://replit.com/@40823152/w16">https://replit.com/@40823152/w16</a></p>
<p>github :<a href="https://github.com/40823152/w16"> repo</a></p>
<p>github-pages :  <a href="https://40823152.github.io/w16/content/index.html">https://40823152.github.io/w16/content/index.html</a> </p>
<p></p>
<p><img alt="" height="456" src="/images/w16_replit.png" width="800"/></p>
<p></p>
<p></p>
<h2>get_Meteorological_data</h2>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<div></div>
<hr/>
<p><button id="add1to100part2">get_Meteorological_dat</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2" style="width: 315px; height: 116px;"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p></p>
<h1>W17</h1>
<p></p>
<p><span>w17 在</span>github 以<span> </span><a href="https://github.com/mdecycu/cmsite">cmsite</a><span> </span>作為 template 時, 因為將 cmsimde 作為倉儲的子模組, 因此 import 進入 Replit 時, 除了必須配合授權外 (連接 Replit 與 Github), 還必須在導入<span> </span><a href="https://github.com/scrum-1/scrum-1.github.io">scrum-1.github.io</a><span> </span>之後, 利用<span> </span><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodule update --init --recursive</a><span> </span>取下 cmsimde 子模組的內容.</p>
<p>確認 Replit 並不會在 Import repo from github 時取下子模組內容:</p>
<p></p>
<p><img alt="" height="155" src="/images/Import repo from github.png" width="800"/></p>
<p><span>為了要讓 Replit 環境可以執行 cmsimde 動態網站, 必須安裝下列模組:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install flask flask_cors bs4 lxml pelican markdown gevent</pre>
<p></p>
<h2>W17_replit</h2>
<p>github : <a href="https://github.com/40823152/w17">repo</a> </p>
<p>replit : <a href="https://replit.com/@40823152/w17#README.md">url</a></p>
<p>github page : <a href="https://40823152.github.io/w17/content/index.html">web</a></p>
<p></p>
<p>github page web image:</p>
<p><img alt="" height="425" src="/images/w17_replit_web.png" width="800"/></p>
<p></p>
<p><span>replit  image:</span></p>
<p><img alt="" height="374" src="/images/w17_replit.png" width="800"/></p>
<p></p>
<p></p>
<p></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p><h2>0. for 1+10</h2>
<p></p>
<p><button id="1加到10">1加到10</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/40823152/538bbdb4e6fab18e181dc29db8087d94/raw/47e5ea88e7e6edd623b2c364ffd2dda95c68525c/1+10"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/40823152/538bbdb4e6fab18e181dc29db8087d94/raw/47e5ea88e7e6edd623b2c364ffd2dda95c68525c/1+10"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["w14缺考名單"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p></p><h2>1. Bython reads exam scores</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<div></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt">1aw5.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt">1aw6.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt">1aw6-2.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt">1aw8.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt">1aw9.txt</a></div>
<hr/>
<p></p>
<p><button id="add1to100part2">1aW5</button><button id="cango_three_gears">1aW6</button><button id="bsnake">1aW6-2</button><button id="aitetris">1aW8 </button><button id="threejsblock">1aW9 </button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/40823152/d2e9c4d2e571ee185de141ac45fe9c3b/raw/1938e2930b9193065f80bb3b7edf9ee615893275/get_score_1aw6"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/40823152/cb5754fc06c706c1bb59e7a8ca980583/raw/5f32e7172c77e6a28fe446db90d56d21f22dfcef/get_score_1aw6-2"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/40823152/dc3e395c11bf85bb566f6405684ca9b6/raw/8a9c5096474f7d223ce0325e3c88baaa2b3d69ed/get_score_1aw8"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/40823152/097671b1fc594300bb179227ddcccef5/raw/6093d3fe28045a83433a66db6398f734cdece562/get_score_1aw9"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2" style="width: 315px; height: 116px;"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>
<p></p>
<h2>2. get_Meteorological_data</h2>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<div></div>
<hr/>
<p><button id="add1to100part2">get_Meteorological_dat</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/40823152/d16ab04b8e9c36e907e69eb73e13e788/raw/012be09a5ebe272f60f551d6e8d0da795ce2af45/get_Meteorological_data.txt"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2" style="width: 315px; height: 116px;"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/><h2>test</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>
<h3>test2</h3>
<p></p><h1>Fault</h1><h2>Deploy to GitHub Pages</h2>
<p></p>
<p><strong>Problem:</strong></p>
<p>Encountered a problem while deploying GitHub Pages.</p>
<p><span>We can see in the image below that the deployment was unsuccessful.</span></p>
<p><img alt="" height="479" src="/images/Deploy to GitHub Pages.png" width="1280"/></p>
<hr/>
<p>So, I clicked on the URL provided when the error occurred.</p>
<p>error occurred URL:</p>
<p><a href="https://pipelines.actions.githubusercontent.com/Hw3e2PMeyWV2jEBbDPrdBukQyp2Y4L1NLtiVjVuuDxGPGj0j0I/_apis/pipelines/workflows/4411085700/artifacts?api-version=6.0-preview">https://pipelines.actions.githubusercontent.com/Hw3e2PMeyWV2jEBbDPrdBukQyp2Y4L1NLtiVjVuuDxGPGj0j0I/_apis/pipelines/workflows/4411085700/artifacts?api-version=6.0-preview</a></p>
<p></p>
<p><span>We can see in the information below that it says "unauthorized to access this resource."</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">{"$id":"1","innerException":null,"message":"The user 'System:PublicAccess;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' is not authorized to access this resource.","typeName":"Microsoft.TeamFoundation.Framework.Server.UnauthorizedRequestException, Microsoft.TeamFoundation.Framework.Server","typeKey":"UnauthorizedRequestException","errorCode":0,"eventId":3000}</pre>
<p></p>
<hr/>
<p><span>So, I created a new token to gain access.</span></p>
<p>Token:<a href="https://github.com/settings/tokens?page=1">https://github.com/settings/tokens?page=1</a></p>
<p>Tokem introduce:</p>
<p><span>Tokens you have generated that can be used to access the </span><a href="https://docs.github.com/" target="_blank">GitHub API</a><span>.</span></p>
<p><span></span></p>
<hr/>
<p>To create a Personal Access Token (classic) in GitHub, please follow these steps:</p>
<p><span></span></p>
<ol>
<li>
<p>Login to your GitHub account and click on your profile picture in the top right corner.</p>
</li>
<li>
<p>Select "<strong>Settings</strong>" from the dropdown menu.</p>
</li>
<li>
<p>From the left-hand menu, choose "<strong>Personal access tokens."</strong></p>
</li>
<li>
<p>Click on the "<strong>Generate new token</strong>" button.</p>
</li>
<li>
<p>In the "<strong>Token description</strong>" field, enter a description that will help you identify the purpose of this token.</p>
</li>
<li>
<p>Choose the necessary permissions for the token. For example, you may need to select the <strong>"repo"</strong> scope to access repositories.</p>
</li>
<li>
<p>Once you've selected the permissions, click on the "<strong>Generate token</strong>" button.</p>
</li>
<li>
<p>Your token will be generated, and you will be shown the token value.</p>
</li>
<li>
<p>Copy the token and store it in a secure place, as GitHub will not display the token value again.</p>
</li>
</ol>
<p>That's it! You can now use the token to access GitHub APIs or perform actions that require authentication.</p>
<p><img alt="" height="597" src="/images/Personal access tokens .gif" width="1080"/></p>
<p></p>
<h2>invalid path</h2>
<p></p>
<p><strong>Problem:</strong></p>
<p><span>I suspect the issue is that the path contains a : which is illegal on Windows.</span></p>
<p><span>If the following error message appears:</span></p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">error: invalid path 'configs/perl-modules/DIST.64/perl-HTML-Tree-1:5.03-1.el6.noarch.rpm'</pre>
<p></p>
<p>solution web : <a href="https://stackoverflow.com/questions/63727594/github-git-checkout-returns-error-invalid-path-on-windows">error: invalid path</a></p>
<p><span>You can use the following command to fix it.</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git config core.protectNTFS false</pre>
<p><br/><span>You can use the following command to </span>ignoring the rules and pushing<strong><br/></strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"> git push -f</pre>
<p></p>
<p>Summarize:</p>
<p><span>The teacher said that the problem arises from the program coding. It is because the title is in a pagination mode, and if a period <span style="color: #ff0000;">' . '</span> is included in the title, it triggers other functions, resulting in the error.</span></p>