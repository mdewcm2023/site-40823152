<h1>About</h1>
<p>四設計四甲</p>
<p>40823152 | 黃暐翰</p>
<p></p>
<p>個人倉儲:<a href="https://github.com/mdewcm2023/site-40823152">github</a></p>
<p></p>
<h1>w1-w3</h1>
<p></p>
<h2>Useing a portable system</h2>
<p><strong>Step 1</strong></p>
<p>Go to the website <a href="https://mde.tw/wcm2023/content/index.html">mde.tw</a>,<span>Find the <span><span> </span></span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=U07OBT">Python3108_for_2023.7z</a> , unzip it and put it in a USB flash drive.</span></p>
<hr/>
<p><img alt="" height="544" src="/images/1.png" width="800"/></p>
<p></p>
<p>Step 2</p>
<p></p>
<p>Open <span style="color: #ff9900;">Python3128_for_2023</span> file and double-click start_ipv4.bat,y<span>ou can use the editing environment now.</span></p>
<hr/>
<p><span><img alt="" height="324" src="/images/1.1.png" width="800"/></span></p>
<p><span></span></p>
<p><span>Example compilation of Python program. </span></p>
<p><span>Find <span style="color: #ff9900;">hello.py</span> located in E:\wcm\Python3108_for_2023\data\tmp\py_ex, and run the program using the Scite editing environment by clicking on "Tools" -&gt; "Go".</span></p>
<p><span> </span></p>
<hr/>
<p><span><img alt="" height="537" src="/images/1.5.png" width="800"/></span></p>
<p><span></span></p>
<p><span>But the version of Python is outdated. Therefore, let's start setting up our own environment!</span></p>
<p><span><img alt="" height="478" src="/images/2.png" width="800"/></span></p>
<p><span></span></p>
<p><span></span></p>
<p><strong>Python various versions</strong></p>
<p><span><img alt="" height="714" src="/images/3.png" width="800"/></span></p><h2>Create a new portable system</h2>
<p><strong>Step 1: </strong></p>
<p><span>Find the <span style="color: #ff9900;">gen_portable_python.py</span> file located at E:\wcm\Python3108_for_2023\data\tmp\py_ex, and open the file using the Scite editing environment.</span></p>
<p><span><img alt="" height="528" src="/images/1.png" width="800"/></span></p>
<hr/>
<p><strong>Step 2</strong></p>
<p><span>Confrim vision  "3.11.2", and Translation: Confirm the location where Python is stored ,Ex:"E:\wcm\wcm2023_test2\data\Python311" .          "\": the root directory.</span></p>
<p><img alt="" height="769" src="/images/2.png" width="800"/></p>
<hr/>
<p><strong>Step 3</strong></p>
<p><span>Run the program using the Scite editing environment by clicking on "Tools" -&gt; "Go", You can see that the Python311 file has been added to the USB drive.</span></p>
<p><span><img alt="" height="794" src="/images/3.png" width="800"/></span></p>
<hr/>
<p><strong>Step 4</strong></p>
<p><span>Put the <span style="color: #ff9900;">Start.bat <span style="color: #000000;">and</span></span> <span style="color: #ff9900;">Stop.bat</span> into this wcm2023_test2 folder, Creat the home_ipv4, home_ipv6, tmp folder.</span></p>
<p><span><img alt="" height="283" src="/images/4.png" width="800"/></span></p>
<hr/>
<p><strong>Step 5</strong></p>
<p><span> Download the <a href="https://www.scintilla.org/wscite535.zip">Full 64-bit download</a><span><span> </span>(2.3M) </span>zip file from the <a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a> official website, Unzip the file and put it into E:\wcm\wcm2023_test2\data folder. Finial rename the name "wscite" to "wscite535".</span></p>
<p><span></span></p>
<p><span><img alt="" height="503" src="/images/5.png" width="800"/></span></p>
<p><span><img alt="" height="334" src="/images/5.1.png" width="800"/></span></p>
<hr/>
<p><strong>Step 6</strong></p>
<div class="group w-full text-gray-800 dark:text-gray-100 border-b border-black/10 dark:border-gray-900/50 bg-gray-50 dark:bg-[#444654]">
<div class="text-base gap-4 md:gap-6 md:max-w-2xl lg:max-w-xl xl:max-w-3xl p-4 md:py-6 flex lg:px-0 m-auto">
<div class="relative flex w-[calc(100%-50px)] flex-col gap-1 md:gap-3 lg:w-[calc(100%-115px)]">
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>In the Python3108_for_2023 environment, open start_ipv4.bat using Scite, r<span>ename the file with the name of the latest version, For example, the area marked with a red line.</span></p>
</div>
</div>
</div>
</div>
</div>
</div>
<p></p>
<p><img alt="" height="523" src="/images/6.png" width="800"/></p>
<hr/>
<p><strong>Step 7</strong></p>
<p><span>1.Edit python.properties and change line 153 to: python.command=pythonw </span></p>
<p><span>2.Edit SciTEGlobal.properties and change line 162 to: load.on.activate=1 (if the file being edited is modified in other applications, it can be automatically loaded in SciTE)</span></p>
<p><span>3.Edit SciTEGlobal.properties and change line 204 to: tabsize=4 </span></p>
<p><span>4.Edit SciTEGlobal.properties and change line 205 to: indent.size=4 Remove the # symbol on line 335 (code.page=65001, indicating that the editing area uses UTF-8 encoding) Comment out line 336 with the # symbol (code.page=0, indicating that the system's Chinese encoding, i.e. big-5, should be used)</span></p>
<p><span><img alt="" height="1163" src="/images/7.png" width="800"/></span></p>
<p><span><img alt="" height="692" src="/images/7.1.png" width="800"/></span></p>
<p><span><img alt="" height="621" src="/images/7.2.png" width="800"/></span></p>
<p><span><img alt="" height="526" src="/images/7.3.png" width="800"/></span></p>
<hr/>
<p><strong>Step 8</strong></p>
<p><span>C</span><span>ompleted the environment, write a simple code to test, for example, 'print("hi")'.</span></p>
<p><span></span></p>
<p><span><img alt="" height="317" src="/images/8.png" width="800"/></span></p>
<p><span></span></p><h1>w4-w6</h1>
<p></p>
<h1>Bython</h1>
<p></p>
<p><button id="w14缺考名單">w14缺考名單</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/40823152/538bbdb4e6fab18e181dc29db8087d94/raw/47e5ea88e7e6edd623b2c364ffd2dda95c68525c/1+10"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/40823152/538bbdb4e6fab18e181dc29db8087d94/raw/47e5ea88e7e6edd623b2c364ffd2dda95c68525c/1+10"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["w14缺考名單"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p></p><h1>Notes</h1>
<p><strong>權限</strong></p>
<p>.git config</p>
<p></p>
<p><strong>提交</strong></p>
<p>git commit -m /  m-&gt; message</p>
<p></p>
<p></p><h1>Wrong</h1>
<p></p>
<h2>Deploy to GitHub Pages</h2>
<p></p>
<p><strong>Problem:</strong></p>
<p>Encountered a problem while deploying GitHub Pages.</p>
<p><span>We can see in the image below that the deployment was unsuccessful.</span></p>
<p><img alt="" height="479" src="/images/Deploy to GitHub Pages.png" width="1280"/></p>
<hr/>
<p>So, I clicked on the URL provided when the error occurred.</p>
<p>error occurred URL:</p>
<p><a href="https://pipelines.actions.githubusercontent.com/Hw3e2PMeyWV2jEBbDPrdBukQyp2Y4L1NLtiVjVuuDxGPGj0j0I/_apis/pipelines/workflows/4411085700/artifacts?api-version=6.0-preview">https://pipelines.actions.githubusercontent.com/Hw3e2PMeyWV2jEBbDPrdBukQyp2Y4L1NLtiVjVuuDxGPGj0j0I/_apis/pipelines/workflows/4411085700/artifacts?api-version=6.0-preview</a></p>
<p></p>
<p><span>We can see in the information below that it says "unauthorized to access this resource."</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">{"$id":"1","innerException":null,"message":"The user 'System:PublicAccess;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' is not authorized to access this resource.","typeName":"Microsoft.TeamFoundation.Framework.Server.UnauthorizedRequestException, Microsoft.TeamFoundation.Framework.Server","typeKey":"UnauthorizedRequestException","errorCode":0,"eventId":3000}</pre>
<p></p>
<hr/>
<p><span>So, I created a new token to gain access.</span></p>
<p>Token:<a href="https://github.com/settings/tokens?page=1">https://github.com/settings/tokens?page=1</a></p>
<p>Tokem introduce:</p>
<p><span>Tokens you have generated that can be used to access the </span><a href="https://docs.github.com/" target="_blank">GitHub API</a><span>.</span></p>
<p><span></span></p>
<hr/>
<p>To create a Personal Access Token (classic) in GitHub, please follow these steps:</p>
<p><span></span></p>
<ol>
<li>
<p>Login to your GitHub account and click on your profile picture in the top right corner.</p>
</li>
<li>
<p>Select "<strong>Settings</strong>" from the dropdown menu.</p>
</li>
<li>
<p>From the left-hand menu, choose "<strong>Personal access tokens."</strong></p>
</li>
<li>
<p>Click on the "<strong>Generate new token</strong>" button.</p>
</li>
<li>
<p>In the "<strong>Token description</strong>" field, enter a description that will help you identify the purpose of this token.</p>
</li>
<li>
<p>Choose the necessary permissions for the token. For example, you may need to select the <strong>"repo"</strong> scope to access repositories.</p>
</li>
<li>
<p>Once you've selected the permissions, click on the "<strong>Generate token</strong>" button.</p>
</li>
<li>
<p>Your token will be generated, and you will be shown the token value.</p>
</li>
<li>
<p>Copy the token and store it in a secure place, as GitHub will not display the token value again.</p>
</li>
</ol>
<p>That's it! You can now use the token to access GitHub APIs or perform actions that require authentication.</p>
<p><img alt="" height="597" src="/images/Personal access tokens .gif" width="1080"/></p>
<p></p>